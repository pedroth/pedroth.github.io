_Simple Calculator Parser_ is a simple _parser_ and _evaluator_ for mathematical expressions in binary. My main motivation for this was to study [formal grammars](https://en.wikipedia.org/wiki/Formal_grammar), [parsers](https://en.wikipedia.org/wiki/Recursive_descent_parser) and [compilers](https://en.wikipedia.org/wiki/Compiler). I tried to build the simplest parser I could, using no dependencies. The parser that was implemented is similar to a [parser combinator](https://en.wikipedia.org/wiki/Parser_combinator). With the practice I have got from this I started to write the [Nabladown language](https://github.com/pedroth/nabladown.js).

Please go check the project page.

![](/posts/SimpleCalculator/SimpleCalculator.webp)

# Project

<div style="display: flex;flex-direction: column">
    <a target="_blank" href="https://github.com/pedroth/BitCalculator" style="align-self: center; margin: 20px">
        <button class="button">
            Project Page
        </button>
    </a>
    <a target="_blank" href="https://pedroth.github.io/BitCalculator/" style="align-self: center">
        <button class="button">
            BitCalculator Demo
        </button>
    </a>
</div>


```js*
function runLazy(lazyAction) {
    let result = lazyAction();
    while(typeof result === "function") {

    } 
    return result;
}

function potential(lambda) {

}

function actual(lambda) {

}

function or(...builders) {
    const randomIndex = Math.floor(Math.random() * builders.length);
    return builders[randomIndex]();
}

function sum(n) {
    if(n < 0) return number(1);
    return or(
        () => `(${sum(n-1)} + ${sum(n-1)})`,
        () => `(${sum(n-1)} - ${sum(n-1)})`,
        () => `${mul(n)}`
    );
}

function mul(n) {
    if(n < 0) return number(1);
    return or(
        () => `(${mul(n-1)} * ${mul(n-1)})`,
        () => `(${mul(n-1)} / ${mul(n-1)})`,
        () => `${number(n)}`,
    );
}

function number(n) {
    return or(
        () => `0${number(n-1)}`,
        () => `1${number(n-1)}`,
        () => `2${number(n-1)}`,
        () => `3${number(n-1)}`,
        () => `4${number(n-1)}`,
        () => `5${number(n-1)}`,
        () => `6${number(n-1)}`,
        () => `7${number(n-1)}`,
        () => `8${number(n-1)}`,
        () => `9${number(n-1)}`,
        () => epsilon(),
    );
}

function epsilon() {
    return "";
}

sum(1)
```