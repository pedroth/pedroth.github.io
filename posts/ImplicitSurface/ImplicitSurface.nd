<!-- 
title: Implicit surface
creationDate: 01/11/2014
lastUpdateDate: 20/01/2024
tags: [
    3d,
    java,
    geometry,
    surfaces,
    simulation,
    experiments,
    mathematics,
    visualization,
    computer science
]
 -->
_Implicit Surface_ is a simple `java` application where you can visualize surfaces of the form: 

    $$S = \left \{(x,y,z) \in \mathbb{R}^3 : f(x,y,z) = 0 \right \}$$

Where $f: \mathbb{R}^3 \rightarrow \mathbb{R}$. A popular surface of these, is the sphere, which is defined as: 
 
$$
    x^2+y^2+z^2 -1 = 0
$$

Or a double torus:

$$
    r = x^2(1 - x^2) - y^2\\
    r^2 + z ^2 - 0.04 = 0
$$

There are many other surfaces to explore here, check the demo on the video below. Enjoy!!
 
Feel free to download the program below.

![*Implicit Surface* app video](https://youtu.be/th5fCVsMbXw)

## Js port

This was taken from my khan academy profile [here](https://www.khanacademy.org/computer-programming/2-torus/6336410200309760):

<div align="center">
    <canvas id="canvas" width="560" height="400"></canvas>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/processing.js/1.4.8/processing.min.js"></script>
<script>
    var canvas=document.getElementById("canvas");var processing=new Processing(canvas,function(processing){processing.size(400,400);processing.background(4095);var mouseIsPressed=false;processing.mousePressed=function(){mouseIsPressed=true};processing.mouseReleased=function(){mouseIsPressed=false};var keyIsPressed=false;processing.keyPressed=function(){keyIsPressed=true};processing.keyReleased=function(){keyIsPressed=false};function getImage(s){var url="https://www.kasandbox.org/programming-images/"+s+".png";processing.externals.sketch.imageCache.add(url);return processing.loadImage(url)}var rotateFn=processing.rotate;processing.rotate=function(angle){rotateFn(processing.radians(angle))};with(processing){
        var currentTime,oldTime,time,colorBuffer,xmin=-1,xmax=1,ymin=-1,ymax=1,minSamples=1200,maxSamples=1e4,samples=minSamples,sqrtSamples=floor(sqrt(samples)),eye=[0,0,-1.4],dEye=[0,0,0],eyeThrust=[0,0,0],theta=-1.6,dTheta=0,thetaThrust=0,phi=-1.3,dPhi=0,phiThrust=0,xCam=[0,1,0],yCam=[0,0,1],zCam=[-1,0,0],surfaceColor=[255,0,0],lightColor=[255,255,255],maxVision=10,isHD=!0,f=function(r,e,a){var t=r*r*(1-r*r)-e*e;return t*t+a*a-.04},changeXcoord=function(r){return(r-xmin)*width/abs(xmax-xmin)},changeYcoord=function(r){return-(r-ymax)*height/abs(ymax-ymin)},drawString=function(r,e,a){var t=changeXcoord(e),i=changeYcoord(a);text(r,t,i)},sign=function(r){return r?r<0?-1:1:0},add=function(r,e){var a=[];return a[0]=r[0]+e[0],a[1]=r[1]+e[1],a[2]=r[2]+e[2],a},diff=function(r,e){var a=[];return a[0]=r[0]-e[0],a[1]=r[1]-e[1],a[2]=r[2]-e[2],a},scalarMult=function(r,e){var a=[];return a[0]=r*e[0],a[1]=r*e[1],a[2]=r*e[2],a},squaredNorm=function(r){return r[0]*r[0]+r[1]*r[1]+r[2]*r[2]},myNorm=function(r){return sqrt(squaredNorm(r))},normalize=function(r){return 0!==r[0]&&0!==r[1]&&0!==r[2]?scalarMult(1/myNorm(r),r):r},innerProd=function(r,e){return r[0]*e[0]+r[1]*e[1]+r[2]*e[2]},matrixProd=function(r,e,a,t){return add(add(scalarMult(t[0],r),scalarMult(t[1],e)),scalarMult(t[2],a))},initColorBuffer=function(r){samples=r,sqrtSamples=floor(sqrt(samples)),colorBuffer=[];for(var e=0;e<3*samples;e++)colorBuffer[e]=0},init=function(){oldTime=.001*millis(),time=0,colorBuffer=[];for(var r=0;r<3*samples;r++)colorBuffer[r]=0},mouseDragged=function(){if(mouseIsPressed){var r=mouseX-pmouseX,e=mouseY-pmouseY;theta-=2*Math.PI*(r/width),phi-=2*Math.PI*(e/height)}},mouseReleased=function(){thetaThrust=0,phiThrust=0},keyPressed=function(){var r=key.code,e=[0,0,0];119===r&&(e=add(e,[0,0,1])),97===r&&(e=add(e,[-1,0,0])),115===r&&(e=add(e,[0,0,-1])),100===r&&(e=add(e,[1,0,0])),101===r&&(e=add(e,[0,-1,0])),113===r&&(e=add(e,[0,1,0])),104===r&&(isHD=!isHD),eyeThrust=e,initColorBuffer(isHD?maxSamples:minSamples)},keyReleased=function(){eyeThrust=[0,0,0]},orbit=function(r){theta+=r*(dTheta+=r*(thetaThrust-dTheta)),theta%=2*Math.PI,phi+=r*(dPhi+=r*(phiThrust-dPhi)),phi%=2*Math.PI;var e=Math.cos(phi),a=Math.cos(theta),t=Math.sin(phi),i=Math.sin(theta);eyeThrust=matrixProd(xCam=[-i,a,0],yCam=[-t*a,-t*i,e],zCam=[-e*a,-e*i,-t],eyeThrust),dEye=add(dEye,scalarMult(r,diff(eyeThrust,dEye))),eye=add(eye,scalarMult(r,dEye))};init();var intersectionVisionSphere=function(r,e,a,t){var i=squaredNorm(diff(r,a))-t*t,o=2*innerProd(diff(r,a),e),n=squaredNorm(e),s=o*o-4*n*i;if(s<0)return 0;var u=(-o-sqrt(s))/(2*n),f=(-o+sqrt(s))/(2*n);return min(max(u,0),max(f,0))},lineFunc=function(r,e,a){return add(r,scalarMult(a,e))},gradF=function(r){var e=[];return e[0]=(f(r[0]+1e-6,r[1],r[2])-f(r[0],r[1],r[2]))/1e-6,e[1]=(f(r[0],r[1]+1e-6,r[2])-f(r[0],r[1],r[2]))/1e-6,e[2]=(f(r[0],r[1],r[2]+1e-6)-f(r[0],r[1],r[2]))/1e-6,e},shading=function(r){for(var e=normalize(gradF(r)),a=normalize(diff(eye,r)),t=Math.max(0,innerProd(e,a)),i=1,o=0;o<8;o++)i*=t;return add(scalarMult(t,surfaceColor),scalarMult(i,lightColor))},trace=function(r,e){var a=maxVision/68,t=-1,i=[];i[0]=0,i[1]=0,i[2]=0;var o=[];o[0]=r[0],o[1]=r[1],o[2]=r[2];for(var n=0;n<67;n++){var s=add(o,scalarMult(a,e));if(f(o[0],o[1],o[2])*f(s[0],s[1],s[2])<0){t=n;break}o[0]=s[0],o[1]=s[1],o[2]=s[2]}if(-1===t)return i;var u=a*t,l=a*(t+1),m=0,d=1;for(n=0;n<20&&(o=lineFunc(r,e,m=.5*(u+l)),d=f(o[0],o[1],o[2]),!(Math.abs(d)<.001));n++)o=lineFunc(r,e,u),sign(f(o[0],o[1],o[2]))===sign(d)?u=m:l=m;return scalarMult(1-d/.1,shading(o))},raytrace=function(){for(var r=sqrtSamples,e=0;e<r;e++)for(var a=0;a<r;a++){var t=[xmin+(xmax-xmin)/r*e,ymin+(ymax-ymin)/r*a,1];t=normalize(t),t=matrixProd(xCam,yCam,zCam,t);var i=trace(eye,t),o=3*a+3*r*e;colorBuffer[o]=i[0],colorBuffer[o+1]=i[1],colorBuffer[o+2]=i[2]}},draw=function(){background(0,0,0);var r=(currentTime=.001*millis())-oldTime;oldTime=currentTime,time+=r,orbit(r),raytrace();for(var e=0;e<sqrtSamples;e++)for(var a=0;a<sqrtSamples;a++){var t=width/sqrtSamples*e,i=height/sqrtSamples*a,o=floor(t),n=floor(i),s=3*a+3*sqrtSamples*e;stroke(colorBuffer[s],colorBuffer[s+1],colorBuffer[s+2]),fill(colorBuffer[s],colorBuffer[s+1],colorBuffer[s+2]),rect(o,n,width/sqrtSamples,height/sqrtSamples)}fill(255,0,0),0!==r&&drawString(1/r,-1,.95)};
    }if(typeof draw!=="undefined")processing.draw=draw});
</script>

Use `mouse` and keys `a,w,s,d` to control the camera.

## Links

<div style="display: flex;flex-direction: column">
    <a href="posts/ImplicitSurface/ImplicitSurface.zip" target="_blank" style="align-self: center; margin: 20px">
        <button class="button">
            Download app
        </button>
    </a>
    <a target="_blank" href="https://github.com/pedroth/pedroEngine/blob/master/src/main/java/apps/ImplicitSurface.java" style="align-self: center">
        <button class="button">
            Source Code
        </button>
    </a>
</div>

## Running with docker

Copy paste to a terminal:

``` bash
xhost + && sudo docker run --rm -v /tmp/.X11-unix:/tmp/.X11-unix:ro -e DISPLAY=$DISPLAY -it pedroth/java-apps bash -c "java -cp pedroEngine/pedroEngine.jar apps.ImplicitSurface"
```

## Java web emulation

<div style="display: flex;flex-direction: column">
<a href="posts/ImplicitSurface/java-emulation.html" target="_blank" style="align-self: center;">
    <button class="button">
       Launch emulation
    </button>
</a>
</div>

